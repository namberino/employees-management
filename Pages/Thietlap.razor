@page "/thietlap"

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService

<PageTitle>Thiết lập</PageTitle>
<style>
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        width: 210px;
        height: 100vh;
        background: var(--secondary);
        transition: 0.5s;
        z-index: 999;
    }

    .content.px-4 {
        padding-left: 0 !important;
    }

    .bg-secondary {
        background-color: white !important;
    }

    .content .navbar .dropdown-item {
        color: black;
    }
</style>
<HeadContent>
    <link href="css/admin.css" rel="stylesheet" />
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />

    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="custom.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="moment.min.js"></script>
    <script src="waypoints.min.js"></script>
    <script src="js1.js"></script>
    <script src="bt4.js"></script>
</HeadContent>

<div class="container-fluid position-relative d-flex p-0"
    <!-- Sidebar Start -->
    <div class="sidebar pe-4 pb-3">
        <nav class="navbar bg-white text-dark navbar-dark">
            <a href="trangchu" class="navbar-brand mx-4 mb-3">
                <h3 class="text-primary"><i class="fa fa-user-edit me-2"></i>HR</h3>
            </a>
            <div class="d-flex align-items-center ms-4 mb-4">
                <div class="position-relative">
                    <img class="rounded-circle" src="css/image/user.svg" alt="" style="width: 40px; height: 40px;">
                    <div class="bg-success rounded-circle border border-2 border-white position-absolute end-0 bottom-0 p-1"></div>
                </div>
                <div class="ms-3">
                    <h6 class="mb-0 text-dark">@AuthService.Username</h6>
                    <span>@AuthService.UserRole</span>
                </div>
            </div>
            <div class="navbar-nav w-100">
                <a href="trangchu" class="nav-item nav-link "><i class="fa fa-tachometer-alt me-2"></i>Trang chủ</a>
                <div class="nav-item dropdown">
                    @if (user_role == "Cap 6" || user_role == "Cap 3" || user_role == "Cap 2" || user_role == "Cap 1")
                    {
                            <a class="nav-link dropdown-toggle active" data-bs-toggle="dropdown"><i class="fa fa-table me-2"></i>Bảng công</a>
                            <div class="dropdown-menu bg-transparent border-0 show">
                                <a href="bangcong" class="dropdown-item" id="drop21">Bảng công nhân viên</a>

                                <a href="chamcong" class="dropdown-item" id="drop22">Chấm công nhân viên</a>
                                <a href="thietlap" class="dropdown-item active" id="drop22">Thiết lập</a>
                            </div>
                    }
                </div>

                @if (user_role == "Cap 5" || user_role == "Cap 3" || user_role == "Cap 2" || user_role == "Cap 1")
                {
                        <a href="danhsach_nv" class="nav-item nav-link "><i class="fa fa-user-tie me-2"></i>Quản lí nhân sự</a>
                }

                <div class="nav-item dropdown">
                    @if (user_role == "Cap 4" || user_role == "Cap 2" || user_role == "Cap 1")
                    {
                            <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown"><i class="fa fa-money-check me-2"></i>Quản lí lương</a>
                            <div class="dropdown-menu bg-transparent border-0 ">
                                <a href="bangluong" class="dropdown-item" id="drop21">Bảng lương</a>

                                <a href="thuong_phat" class="dropdown-item" id="drop22">Bảng thưởng/phạt</a>
                            </div>
                    }
                </div>
                <div class="navbar-nav w-100">
                    <!-- Get user role -->
                    @if (user_role == "Cap 1")
                    {
                            <a href="captaikhoan" class="nav-item nav-link"><i class="fa fa-id-card me-2"></i>Cấp tài khoản</a>
                    }
                </div>
            </div>
        </nav>
    </div>
    <!-- Sidebar End -->
    <!-- Content Start -->
    <div class="content">
        <!-- Navbar Start -->
        <nav class="navbar navbar-expand bg-secondary navbar-dark sticky-top px-4 py-0 bg-white">
            <a href="admin_dashboard.html" class="navbar-brand d-flex d-lg-none me-4">
                <h2 class="text-primary mb-0"><i class="fa fa-user-edit"></i></h2>
            </a>
            <a class="sidebar-toggler flex-shrink-0">
                <i class="fa fa-bars"></i>
            </a>

            <div class="navbar-nav align-items-center ms-auto">
                @* <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                        <i class="fa fa-bell me-lg-2"></i>
                        <span class="d-none d-lg-inline-flex">Notification</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end bg-secondary border-0 rounded-0 rounded-bottom m-0">
                        <a class="dropdown-item" onclick="">
                            <h6 class="fw-normal mb-0" style="color:black">Profile updated</h6>
                            <small>15 minutes ago</small>
                        </a>
                        <hr class="dropdown-divider">
                        <a class="dropdown-item" onclick="">
                            <h6 class="fw-normal mb-0" style="color:black">Password changed</h6>
                            <small>15 minutes ago</small>
                        </a>
                    </div>
                </div> *@
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                        <img class="rounded-circle me-lg-2" src="css/image/user.svg" alt="" style="width: 40px; height: 40px;">
                        <span class="d-none d-lg-inline-flex">@AuthService.Username</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end bg-secondary border-0 rounded-0 rounded-bottom m-0">

                        <a href="/" class="dropdown-item">Sign Out</a>
                    </div>
                </div>
            </div>
        </nav>
        <!-- Navbar End -->

        <div class="container-fluid pt-4 px-4 ">
            <div class="text-left rounded p-4 bg-white">
                <b><h3 class="text-dark">Thiết lập ngày công</h3></b>
            </div>
        </div>

        <div class="container-fluid pt-4 px-4">
            <div class="bg-white text-left rounded p-4">
                <form class="row g-4 needs-validation text-dark" id="formDealer" novalidate>
                    <div class="col-md-4">
                        <label for="ThangTinhCong" class="form-label">mm/yyyy</label>
                        <input type="text" class="form-control bg-white" style="font-weight: @inputFontWeight; color: @inputColor" disabled="@DisabledInputId"  id="ThangTinhCong" @bind="ThangTinhCong" required @onblur="CheckReload">
                    </div>
                     <div class="col-md-4">
                        <label for="NgayBatDau" class="form-label">Ngày bắt đầu</label>
                        @if (string.IsNullOrEmpty(ThangTinhCong))
                        {
                                     <input type="date" class="form-control bg-white" disabled>
                        }
                        else
                        {
                                            <input type="date" class="form-control bg-white" @bind="NgayBatDau" required>
                        }
                    </div>
                     <div class="col-md-4">
                        <label for="NgayKetThuc" class="form-label">Ngày kết thúc</label>
                        @if (string.IsNullOrEmpty(ThangTinhCong))
                        {
                                             <input type="date" class="form-control bg-white" disabled>
                        }
                        else
                        {
                                                <input type="date" class="form-control bg-white" @bind="NgayKetThuc" required>
                        }
                    </div>
                    <div class="col-md-6">
                        <label for="NgayCongBatBuoc" class="form-label">Ngày công bắt buộc</label>
                        @if (string.IsNullOrEmpty(ThangTinhCong))
                        {
                                     <input type="number" class="form-control bg-white" disabled>
                        }
                        else
                        {
                                    <input type="number" class="form-control bg-white" @bind="NgayCongBatBuoc" required>
                        }
                    </div>
                    <div class="col-md-6">
                        <label for="NgayPhepToiDa" class="form-label">Ngày phép tối đa</label>
                        @if (string.IsNullOrEmpty(ThangTinhCong))
                        {
                                    <input type="number" class="form-control bg-white" disabled>
                        }
                        else
                        {
                                    <input type="number" class="form-control bg-white" @bind="NgayPhepToiDa" required>
                        }
                    </div>
                   

                    <div class="mb-3 text-center">
                        <button class="btn btn-primary" type="button" disabled="@IsDisabledSearch" @onclick="SearchRecords">@buttonText</button>
                        <button class="btn btn-primary ms-5" type="button" disabled="@IsDisabledNew" @onclick="ThemMoi">Thêm mới</button>
                        <button class="btn btn-primary ms-5" type="button" disabled="@IsDisabledUpdate" @onclick="CapNhat">Cập nhật</button>

                    </div>

                </form>
            </div>
        </div>

        <div class="container-fluid pt-4 px-4">
                <div class="bg-white text-center rounded p-4">
                    <div class="table-responsive">
                        <table class="table text-center text-dark align-middle table-bordered table-hover mb-0" id="table">
                            <thead>
                                <tr class="text-dark">
                                    <th scope="col">Tháng năm</th>
                                    <th scope="col">Ngày bắt đầu</th>
                                    <th scope="col">Ngày kết thúc</th>
                                    <th scope="col">Ngày công bắt buộc</th>
                                    <th scope="col">Ngày phép tối đa</th>
                                    <th scope="col">Tác vụ</th>
                                </tr>
                            </thead>

                            <tbody>
                            @foreach (var tlap in thietlapList)
                            {
                                    <tr>
                                        <td>@tlap.ThangTinhCong</td>
                                        <td>@tlap.NgayBatDau.ToShortDateString()</td>
                                        <td>@tlap.NgayKetThuc.ToShortDateString()</td>
                                        <td>@tlap.NgayCongBatBuoc</td>
                                        <td>@tlap.NgayPhepToiDa</td>
                                        <td>
                                            <button type="button" class="btn btn-light" @onclick="() => EditRowD2(tlap.ThangTinhCong, tlap.NgayCongBatBuoc, tlap.NgayPhepToiDa, tlap.NgayBatDau, tlap.NgayKetThuc)"><i class="fa fa-pen"></i></button>
                                            <span><button type="button" class="btn btn-light" @onclick="() => ConfirmDelete(tlap.ThangTinhCong)"><i class="fa fa-trash"></i></button></span>
                                        </td>
                                    </tr>
                            }
                            </tbody>
                        </table>
                            <div class="col-12 col-sm-3 text-center text-sm-start mx-auto pt-4 px-4">
                                <tfoot >
                                    <tr>
                                        <td style="margin-left:50px">
                                            <nav aria-label="Page navigation">
                                                <ul class="pagination justify-content-center">

                                                    <li class="page-item @(!HasPreviousPage() ? "disabled" : "")">
                                                        <button class="page-link" disabled="@(!HasPreviousPage())" @onclick="() => GoToPage(CurrentPage - 1)">Previous</button>
                                                    </li>
                                            @if (totalPages <= 5)
                                            {
                                                for (int i = 1; i <= totalPages; i++)
                                                {
                                                                <li class="page-item @(IsCurrentPage(i) ? "active" : "")">
                                                                                    <i class="page-link" >@i</i>
                                                                </li>
                                                }
                                            }
                                            else
                                            {
                                                if (CurrentPage <= 3)
                                                {
                                                    for (int i = 1; i <= 5; i++)
                                                    {
                                                                        <li class="page-item @(IsCurrentPage(i) ? "active" : "")">
                                                                                       <i class="page-link ">@i</i>
                                                                        </li>
                                                    }
                                                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                                }
                                                else if (CurrentPage >= totalPages - 2)
                                                {
                                                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                                    for (int i = totalPages - 4; i <= totalPages; i++)
                                                    {
                                                                        <li class="page-item @(IsCurrentPage(i) ? "active" : "")">
                                                                            <i class="page-link">@i</i>
                                                                        </li>
                                                    }
                                                }
                                                else
                                                {
                                                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                                    for (int i = CurrentPage - 2; i <= CurrentPage + 2; i++)
                                                    {
                                                                        <li class="page-item @(IsCurrentPage(i) ? "active" : "")">
                                                                            <i class="page-link" > </i>
                                                                        </li>
                                                    }
                                                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                                }
                                            }
                                                    <li class="page-item @(!HasNextPage() ? "disabled" : "")">
                                                        <button class="page-link" disabled="@(!HasNextPage())" @onclick="() => GoToPage(CurrentPage + 1)">Next</button>
                                                    </li>
                                                </ul>

                                            </nav>
                                        </td>
                                    </tr>
                                </tfoot>
                            </div>
                    </div>
                </div>
            </div>






            <div class="container-fluid pt-4 px-4 ">
            <div class="text-left rounded p-4 bg-white">
                <b><h3 class="text-dark">Thiết lập phạt đi muộn</h3></b>
            </div>
        </div>

        <div class="container-fluid pt-4 px-4">
            <div class="bg-white text-left rounded p-4">
                <form class="row g-4 needs-validation text-dark" id="formDealer" novalidate>
                    <div class="col-md-3">
                        <label for="ThangTinhCongMuon" class="form-label">mm/yyyy</label>
                        @if (isEditing)
                        {
                                <input disabled="@DisabledInputId" style="font-weight: @inputFontWeight; color: @inputColor; background-color:white" type="text" @bind="ThangTinhCongMuon" class="form-control" />
                        }
                        else
                        {
                            <select class="form-select bg-white" style="font-weight: @inputFontWeight; color: @inputColor" @bind="ThangTinhCongMuon" required @onblur="CheckReloadMuon">
                                <option value=""></option>
                                @foreach (var month in ThangTinhCongList)
                                {
                                    <option value="@month">@month</option>
                                }
                            </select>
                            
                        }
                    </div>
                      <div class="col-md-3">
                        <label for="SoGioTinhMuon" class="form-label">Số phút tính đi muộn</label>
                        @if (string.IsNullOrEmpty(ThangTinhCongMuon))
                        {
                                        <input type="number" class="form-control bg-white" disabled>
                        }
                        else
                        {
                                            <input type="number" class="form-control bg-white" @bind="SoGioTinhMuon" required>
                        }
                    </div>
                    <div class="col-md-3">
                        <label for="SoTienPhatMuon" class="form-label">Số tiền phạt đi muộn</label>
                        @if (string.IsNullOrEmpty(ThangTinhCongMuon))
                        {
                                            <input type="decimal" class="form-control bg-white" disabled>
                        }
                        else
                        {
                                                <input type="decimal" class="form-control bg-white" @bind="SoTienPhatMuon" required>
                        }
                    </div>

                    <div class="col-md-3">
                        <label for="SoTienPhatNghiLam" class="form-label">Số tiền phạt nghỉ làm</label>
                        @if (string.IsNullOrEmpty(ThangTinhCongMuon))
                        {
                                            <input type="decimal" class="form-control bg-white" disabled>
                        }
                        else
                        {
                                                    <input type="decimal" class="form-control bg-white" @bind="SoTienPhatNghiLam" required>
                        }
                    </div>

                    <div class=" text-center">
                        <button class="btn btn-primary" type="button" disabled="@IsDisabledSearch" @onclick="SearchPhat">@buttonText</button>
                        <button class="btn btn-primary ms-5" type="button" disabled="@IsDisabledNew" @onclick="ThemMoiPhat">Thêm mới</button>
                        <button class="btn btn-primary ms-5" type="button" disabled="@IsDisabledUpdate" @onclick="CapNhatPhat">Cập nhật</button>

                    </div>

                </form>
            </div>
        </div>

        <div class="container-fluid pt-4 px-4">
                <div class="bg-white text-center rounded p-4">
                    <div class="table-responsive">
                        <table class="table text-center text-dark align-middle table-bordered table-hover mb-0" id="table">
                            <thead>
                                <tr class="text-dark">
                                    <th scope="col">Tháng năm</th>
                                    <th scope="col">Thời gian tính đi muộn (phút)</th>
                                    <th scope="col">Số tiền phạt đi muộn</th>
                                    <th scope="col">Số tiền phạt nghỉ làm</th>
                                    <th scope="col">Tác vụ</th>
                                </tr>
                            </thead>

                            <tbody>
                            @foreach (var muon in phatmuonList)
                            {
                                        <tr>
                                            <td>@muon.ThangTinhCong</td>
                                            <td>@muon.SoGioTinhMuon</td>
                                            <td>@muon.SoTienPhatMuon</td>
                                            <td>@muon.SoTienPhatNghiLam</td>
                                            <td>
                                                    <button type="button" class="btn btn-light" @onclick="() => EditRowMuon(muon.ThangTinhCong, muon.SoGioTinhMuon, muon.SoTienPhatMuon, muon.SoTienPhatNghiLam)"><i class="fa fa-pen"></i></button>
                                                <span><button type="button" class="btn btn-light" @onclick="() => ConfirmDeletePhat(muon.ThangTinhCong)"><i class="fa fa-trash"></i></button></span>
                                            </td>
                                        </tr>
                            }
                            </tbody>
                        </table>
                            <div class="col-12 col-sm-3 text-center text-sm-start mx-auto pt-4 px-4">
                                <tfoot >
                                    <tr>
                                        <td style="margin-left:50px">
                                            <nav aria-label="Page navigation">
                                                <ul class="pagination justify-content-center">

                                                    <li class="page-item @(!HasPreviousPagePhat() ? "disabled" : "")">
                                                        <button class="page-link" disabled="@(!HasPreviousPagePhat())" @onclick="() => GoToPagePhat(CurrentPageP - 1)">Previous</button>
                                                    </li>
                                            @if (totalPagesP <= 5)
                                            {
                                                for (int i = 1; i <= totalPagesP; i++)
                                                {
                                                                        <li class="page-item @(IsCurrentPagePhat(i) ? "active" : "")">
                                                                                            <i class="page-link" >@i</i>
                                                                        </li>
                                                }
                                            }
                                            else
                                            {
                                                if (CurrentPageP <= 3)
                                                {
                                                    for (int i = 1; i <= 5; i++)
                                                    {
                                                                                    <li class="page-item @(IsCurrentPagePhat(i) ? "active" : "")">
                                                                                                   <i class="page-link ">@i</i>
                                                                                    </li>
                                                    }
                                                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                                }
                                                else if (CurrentPageP >= totalPagesP - 2)
                                                {
                                                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                                    for (int i = totalPagesP - 4; i <= totalPagesP; i++)
                                                    {
                                                                                    <li class="page-item @(IsCurrentPagePhat(i) ? "active" : "")">
                                                                                        <i class="page-link">@i</i>
                                                                                    </li>
                                                    }
                                                }
                                                else
                                                {
                                                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                                    for (int i = CurrentPageP - 2; i <= CurrentPageP + 2; i++)
                                                    {
                                                                                    <li class="page-item @(IsCurrentPagePhat(i) ? "active" : "")">
                                                                                        <i class="page-link" > </i>
                                                                                    </li>
                                                    }
                                                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                                }
                                            }
                                                    <li class="page-item @(!HasNextPagePhat() ? "disabled" : "")">
                                                        <button class="page-link" disabled="@(!HasNextPagePhat())" @onclick="() => GoToPagePhat(CurrentPageP + 1)">Next</button>
                                                    </li>
                                                </ul>

                                            </nav>
                                        </td>
                                    </tr>
                                </tfoot>
                            </div>
                    </div>
                </div>
            </div>
        <!-- Footer Start -->
        <div class="container-fluid pt-4 px-4 ">
            <div class="bg-secondary rounded-top p-4 bg-white">
                <div class="row ">
                    <div class="col-12 col-sm-6 text-center text-sm-start ">
                        Copyright © 2024 Project - 22IT1 - CMC Uni.
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End -->
    </div>
    <!-- Content End -->

</div>
@code {
    @using FullProject.Model;
    @using FullProject.Services;
    @using System.Data.SqlClient
    @using Microsoft.EntityFrameworkCore.Metadata.Internal
    @using Microsoft.JSInterop
    @inject ThietLapService thietlapservices;
    @inject FullProject.Data.ThietLapContext thietLapContext
    @using Microsoft.EntityFrameworkCore;
    @inject IJSRuntime JSRuntime

    private string user_role = null;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync called");
        if (!AuthService.IsAuthenticated || AuthService.Username.Length == 0 || AuthService.Username == null || AuthService.UserRole.Length == 0 || AuthService.UserRole == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            user_role = AuthService.UserRole;
            Console.WriteLine("User role is: ", user_role);
            Console.WriteLine("User is authenticated");
        }

        // Gọi phương thức SearchRecords() khi trang được khởi tạo
        thietlapList = await thietlapservices.GetAllThietLap();

        // Tính toán số trang dựa trên số lượng bản ghi và kích thước trang
        totalRecords = await thietlapservices.GetTotalRecords();
        totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);

        ThangTinhCongList = await thietlapservices.GetThangTinhCongValuesAsync();
        phatmuonList = await thietlapservices.GetAllPhatMuon();
        // Tính toán số trang dựa trên số lượng bản ghi và kích thước trang
        totalRecordsP = await thietlapservices.GetTotalRecordsPhat();
        totalPagesP = (int)Math.Ceiling(totalRecordsP / (double)PageSizeP);
        await LoadData();
        await LoadDataPhat();
    }


    private string inputColor = "black"; // Màu chữ mặc định
    private string inputFontWeight = "normal"; // Font chữ mặc định

    public string ThangTinhCong;
    public DateTime? NgayBatDau;
    public DateTime? NgayKetThuc;
    public int? NgayCongBatBuoc;
    public int? NgayPhepToiDa;

    public string ThangTinhCongMuon;
    public int? SoGioTinhMuon;
    public decimal? SoTienPhatMuon;
    public decimal? SoTienPhatNghiLam;

    private bool IsDisabledSearch = false;
    private bool IsDisabledNew = false;
    private bool IsDisabledUpdate = true;
    private bool IsDisabledAdd = false;
    private bool DisabledInputId = false;

    public string buttonText = "Tìm kiếm";

    List<ThietLap> thietlapList = new List<ThietLap>();
    List<BangPhatDiMuon> phatmuonList = new List<BangPhatDiMuon>();
    private List<string> ThangTinhCongList = new List<string>();


    // Tìm kiếm dựa vào tháng tính công
    private async Task SearchRecords()
    {
        if (!string.IsNullOrEmpty(ThangTinhCong)
    )
        {
            // Kiểm tra định dạng của ThangTinhCong
            if (ThangTinhCong.Length != 7)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Tháng năm phải có đúng định dạng mm/yyyy");
                ThangTinhCong = null;

                // Focus vào inputElement
                await JSRuntime.InvokeVoidAsync("FocusInputElement");
                return;
            }

            // Thực hiện tìm kiếm khi ThangTinhCong không rỗng
            thietlapList = await thietlapservices.GetThietLapByThangTinhCong(ThangTinhCong);

            if (thietlapList.Count > 0)
            {
                NgayBatDau = thietlapList[0].NgayBatDau;
                NgayKetThuc = thietlapList[0].NgayKetThuc;
                NgayCongBatBuoc = thietlapList[0].NgayCongBatBuoc;
                NgayPhepToiDa = thietlapList[0].NgayPhepToiDa;

                // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
                if (buttonText == "Tìm kiếm")
                {
                    buttonText = "Hủy Tìm kiếm";
                    IsDisabledNew = true;

                }
                else if (buttonText == "Hủy Tìm kiếm")
                {
                    NgayCongBatBuoc = null;
                    NgayBatDau = null;
                    NgayKetThuc = null;
                    NgayPhepToiDa = null;
                    ThangTinhCong = null;

                    await OnInitializedAsync();

                    buttonText = "Tìm kiếm";
                    IsDisabledNew = false;
                }
            }
            else
            {
                var result = JSRuntime.InvokeAsync<object>("window.alert", "Không tìm thấy " + ThangTinhCong);
                NgayCongBatBuoc = null;
                NgayBatDau = null;
                NgayKetThuc = null;
                NgayPhepToiDa = null;
                ThangTinhCong = null;
                thietlapList = await thietlapservices.GetAllThietLap();

            }
        }
        else
        {
            // Nếu cả ba trường input đều trống, load tất cả các bản ghi từ database
            NgayBatDau = null;
            NgayKetThuc = null;
            NgayCongBatBuoc = null;
            NgayPhepToiDa = null;

            thietlapList = await thietlapservices.GetAllThietLap();
        }
        totalRecords = thietlapList.Count;
        totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);
    }

    // Thêm bản ghi mưới
    private async Task ThemMoi()
    {
        if (!string.IsNullOrEmpty(ThangTinhCong) && NgayCongBatBuoc.HasValue && NgayPhepToiDa.HasValue && NgayBatDau.HasValue && NgayKetThuc.HasValue)
        {
            // Kiểm tra định dạng của trường ThangTinhCong                    tháng phải từ 01-12
            if (ThangTinhCong.Length != 7 || !ThangTinhCong.Contains("/") || !int.TryParse(ThangTinhCong.Substring(0, 2), out int month) || !int.TryParse(ThangTinhCong.Substring(3, 4), out _))
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Phải điền đúng dạng mm/yyyy.");
                return;
            }

            // Kiểm tra xem tháng năm đã tồn tại trong danh sách hay chưa
            foreach (var thietLap in thietlapList)
            {
                if (thietLap.ThangTinhCong == ThangTinhCong)
                {
                    var result = await JSRuntime.InvokeAsync<object>("window.alert", "Tháng tính công đã tồn tại.");
                    return;
                }
            }

            // Kiểm tra giá trị của tháng (mm) nằm trong khoảng từ 01 đến 12
            if (month < 1 || month > 12)
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Tháng phải nằm trong khoảng từ 01 đến 12.");
                return;
            }

            // Kiểm tra các trường NgayCongBatBuoc và NgayPhepToiDa có lớn hơn hoặc bằng 0 không
            if (NgayCongBatBuoc < 0 || NgayPhepToiDa < 0)
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Ngày công bắt buộc và ngày phép tối đa phải lớn hơn hoặc bằng 0.");
                return;
            }


            // Kiểm tra ngày bắt đầu và ngày kết thúc có cùng tháng và năm với tháng tính công
            var startMonthYear = NgayBatDau.Value.ToString("MM/yyyy");
            var endMonthYear = NgayKetThuc.Value.ToString("MM/yyyy");
            if (startMonthYear != ThangTinhCong || endMonthYear != ThangTinhCong)
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Ngày bắt đầu và ngày kết thúc phải cùng tháng và năm với tháng tính công.");
                return;
            }

            // Tạo một đối tượng mới để lưu trữ dữ liệu nhập từ người dùng
            ThietLap newThietLap = new ThietLap
                {
                    ThangTinhCong = ThangTinhCong,
                    NgayBatDau = NgayBatDau.Value,
                    NgayKetThuc = NgayKetThuc.Value,
                    NgayCongBatBuoc = NgayCongBatBuoc.Value,
                    NgayPhepToiDa = NgayPhepToiDa.Value,
                };

            // Gọi phương thức thêm mới từ dịch vụ hoặc lớp xử lý dữ liệu
            await thietlapservices.AddThietLap(newThietLap);
            await JSRuntime.InvokeAsync<object>("window.alert", "Thêm thành công");

            // Sau khi thêm mới, làm sạch các trường input
            ThangTinhCong = string.Empty;
            NgayBatDau = null;
            NgayKetThuc = null;
            NgayCongBatBuoc = null;
            NgayPhepToiDa = null;

            // Cập nhật lại danh sách
            await SearchRecords();
            await LoadData();

        }
        else
        {
            var result = await JSRuntime.InvokeAsync<object>("window.alert", "Phải điền đầy đủ các trường.");
        }

    }

    // Cập nhật thông tin
    private async Task CapNhat()
    {
        if (!string.IsNullOrEmpty(ThangTinhCong) && NgayCongBatBuoc.HasValue && NgayPhepToiDa.HasValue && NgayBatDau.HasValue && NgayKetThuc.HasValue)
        {
            // Kiểm tra định dạng của trường ThangTinhCong
            if (ThangTinhCong.Length != 7 || !int.TryParse(ThangTinhCong.Substring(0, 2), out int month) || !int.TryParse(ThangTinhCong.Substring(3, 4), out _))
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Phải điền đúng dạng mm/yyyy.");
                return;
            }
            // Kiểm tra giá trị của tháng (mm) nằm trong khoảng từ 01 đến 12
            if (month < 1 || month > 12)
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Tháng phải nằm trong khoảng từ 01 đến 12.");
                return;
            }

            // Kiểm tra các trường NgayCongBatBuoc và NgayPhepToiDa có lớn hơn hoặc bằng 0 không
            if (NgayCongBatBuoc < 0 || NgayPhepToiDa < 0)
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Ngày công bắt buộc và ngày phép tối đa phải lớn hơn hoặc bằng 0.");
                return;
            }

            // Kiểm tra ngày bắt đầu và ngày kết thúc có cùng tháng và năm với tháng tính công
            var startMonthYear = NgayBatDau.Value.ToString("MM/yyyy");
            var endMonthYear = NgayKetThuc.Value.ToString("MM/yyyy");
            if (startMonthYear != ThangTinhCong || endMonthYear != ThangTinhCong)
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Ngày bắt đầu và ngày kết thúc phải cùng tháng và năm với tháng tính công.");
                return;
            }
            // Tạo một đối tượng mới để lưu trữ dữ liệu cập nhật từ người dùng
            ThietLap updatedThietLap = new ThietLap
                {
                    ThangTinhCong = ThangTinhCong,
                    NgayBatDau = NgayBatDau.Value,
                    NgayKetThuc = NgayKetThuc.Value,
                    NgayCongBatBuoc = NgayCongBatBuoc.Value,
                    NgayPhepToiDa = NgayPhepToiDa.Value
                };

            // Gọi phương thức cập nhật từ dịch vụ hoặc lớp xử lý dữ liệu
            await thietlapservices.UpdateThietLap(updatedThietLap);

            await JSRuntime.InvokeAsync<object>("window.alert", "Cập nhật thành công");
            DisabledInputId = false;
            inputColor = "black";
            inputFontWeight = "formal";

            // Làm sạch các trường input sau khi cập nhật thành công
            buttonText = "Tìm kiếm";
            ThangTinhCong = string.Empty;
            NgayBatDau = null;
            NgayKetThuc = null;
            NgayCongBatBuoc = null;
            NgayPhepToiDa = null;

            IsDisabledSearch = false;
            IsDisabledNew = false;
            IsDisabledUpdate = true;
            await SearchRecords();
        }
        else
        {
            // Hiển thị một thông báo lỗi hoặc thực hiện một hành động phù hợp nếu dữ liệu nhập không hợp lệ
            // Ví dụ:
            // Hiển thị một thông báo lỗi
        }
    }

    // Đổ dữ liệu vào input khi ấn icon sửa
    public void EditRowD2(string thangTinhCong, int? ngayCongBatBuoc, int? ngayPhepToiDa, DateTime? ngayBatDau, DateTime? ngayKetThuc)
    {

        ThangTinhCong = thangTinhCong;
        NgayBatDau = ngayBatDau;
        NgayKetThuc = ngayKetThuc;
        NgayCongBatBuoc = ngayCongBatBuoc;
        NgayPhepToiDa = ngayPhepToiDa;

        IsDisabledSearch = true;
        IsDisabledNew = true;
        IsDisabledUpdate = false;

        inputColor = "#ff8000";
        inputFontWeight = "bold";
        DisabledInputId = true;

        JSRuntime.InvokeVoidAsync("scrollToTop");
    }

    private async Task XoaThietLap(string thangTinhCong)
    {
        try
        {
            // Tìm và xóa bản ghi từ cơ sở dữ liệu dựa trên ThangTinhCong
            await thietlapservices.Delete(thangTinhCong);

        }
        catch (Exception ex)
        {
            // Xử lý lỗi nếu có
            throw new Exception("Lỗi khi xóa thietLap: " + ex.Message);
        }
    }

    public async Task ConfirmDelete(string thangTinhCong)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc chắn muốn xóa không?" });
        if (confirmed)
        {
            await XoaThietLap(thangTinhCong);
            // Sau khi xóa, cập nhật lại danh sách
            await SearchRecords();
        }
    }private async Task CheckReload()
    {
        if (string.IsNullOrEmpty(ThangTinhCong))
        {
            await OnInitializedAsync();

        }
    }





    // Thiết lập phạt muộn
    // Tìm kiếm dựa vào tháng tính công
    private async Task SearchPhat()
    {
        if (!string.IsNullOrEmpty(ThangTinhCongMuon)
    )
        {
            // Kiểm tra định dạng của ThangTinhCong
            if (ThangTinhCongMuon.Length != 7)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Tháng năm phải có đúng định dạng mm/yyyy");
                ThangTinhCong = null;

                // Focus vào inputElement
                await JSRuntime.InvokeVoidAsync("FocusInputElement");
                return;
            }

            // Thực hiện tìm kiếm khi ThangTinhCong không rỗng
            phatmuonList = await thietlapservices.GetPhatByThangTinhCong(ThangTinhCongMuon);

            if (phatmuonList.Count > 0)
            {
                SoGioTinhMuon = phatmuonList[0].SoGioTinhMuon;
                SoTienPhatMuon = phatmuonList[0].SoTienPhatMuon;
                SoTienPhatNghiLam = phatmuonList[0].SoTienPhatNghiLam;
                

                // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
                if (buttonText == "Tìm kiếm")
                {
                    buttonText = "Hủy Tìm kiếm";
                    IsDisabledNew = true;

                }
                else if (buttonText == "Hủy Tìm kiếm")
                {
                    SoGioTinhMuon = null;
                    SoTienPhatMuon = null;
                    SoTienPhatNghiLam = null;

                    await OnInitializedAsync();

                    buttonText = "Tìm kiếm";
                    IsDisabledNew = false;
                }
            }
            else
            {
                var result = JSRuntime.InvokeAsync<object>("window.alert", "Không tìm thấy " + ThangTinhCongMuon);
                SoGioTinhMuon = null;
                SoTienPhatMuon = null;
                SoTienPhatNghiLam = null;
                phatmuonList = await thietlapservices.GetAllPhatMuon();

            }
        }
        else
        {
            // Nếu cả ba trường input đều trống, load tất cả các bản ghi từ database
            SoGioTinhMuon = null;
            SoTienPhatMuon = null;
            SoTienPhatNghiLam = null;

            phatmuonList = await thietlapservices.GetAllPhatMuon();
        }
        totalRecords = phatmuonList.Count;
        totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);
    }

    // Thêm bản ghi mưới
    private async Task ThemMoiPhat()
    {
        if (!string.IsNullOrEmpty(ThangTinhCongMuon) && SoGioTinhMuon.HasValue && SoTienPhatMuon.HasValue && SoTienPhatNghiLam.HasValue)
        {

            // Kiểm tra xem tháng năm đã tồn tại trong danh sách hay chưa
            foreach (var thietLap in phatmuonList)
            {
                if (thietLap.ThangTinhCong == ThangTinhCongMuon)
                {
                    var result = await JSRuntime.InvokeAsync<object>("window.alert", "Tháng tính công đã tồn tại.");
                    return;
                }
            }

            // Kiểm tra các trường NgayCongBatBuoc và NgayPhepToiDa có lớn hơn hoặc bằng 0 không
            if (SoGioTinhMuon < 0 || SoTienPhatMuon < 0 || SoTienPhatNghiLam < 0)
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Số giờ tính đi muộn và số tiền phải lớn hơn 0.");
                return;
            }


            // Tạo một đối tượng mới để lưu trữ dữ liệu nhập từ người dùng
            BangPhatDiMuon newThietLap = new BangPhatDiMuon
                {
                    ThangTinhCong = ThangTinhCongMuon,
                    SoGioTinhMuon = SoGioTinhMuon.Value,
                    SoTienPhatMuon = SoTienPhatMuon.Value,
                    SoTienPhatNghiLam = SoTienPhatNghiLam.Value,
                };

            // Gọi phương thức thêm mới từ dịch vụ hoặc lớp xử lý dữ liệu
            await thietlapservices.AddPhat(newThietLap);
            await JSRuntime.InvokeAsync<object>("window.alert", "Thêm thành công");

            // Sau khi thêm mới, làm sạch các trường input
            ThangTinhCongMuon = string.Empty;
            SoGioTinhMuon = null;
            SoTienPhatMuon = null;
            SoTienPhatNghiLam = null;

            // Cập nhật lại danh sách
            await SearchPhat();
            await LoadDataPhat();
        }
        else
        {
            var result = await JSRuntime.InvokeAsync<object>("window.alert", "Phải điền đầy đủ các trường.");
        }

    }

    // Cập nhật thông tin
    private async Task CapNhatPhat()
    {
        if (!string.IsNullOrEmpty(ThangTinhCongMuon) && SoGioTinhMuon.HasValue && SoTienPhatMuon.HasValue && SoTienPhatNghiLam.HasValue)
        {
            // Kiểm tra các trường NgayCongBatBuoc và NgayPhepToiDa có lớn hơn hoặc bằng 0 không
            if (SoGioTinhMuon < 0 || SoTienPhatMuon < 0 || SoTienPhatNghiLam < 0 )
            {
                var result = await JSRuntime.InvokeAsync<object>("window.alert", "Ngày phút và số tiền phạt phải lớn hơn 0.");
                return;
            }

            // Tạo một đối tượng mới để lưu trữ dữ liệu cập nhật từ người dùng
            BangPhatDiMuon updatedThietLap = new BangPhatDiMuon
                {
                    ThangTinhCong = ThangTinhCongMuon,
                    SoGioTinhMuon = SoGioTinhMuon.Value,
                    SoTienPhatMuon = SoTienPhatMuon.Value,
                    SoTienPhatNghiLam = SoTienPhatNghiLam.Value,
                };

            // Gọi phương thức cập nhật từ dịch vụ hoặc lớp xử lý dữ liệu
            await thietlapservices.UpdatePhat(updatedThietLap);

            await JSRuntime.InvokeAsync<object>("window.alert", "Cập nhật thành công");
            DisabledInputId = false;
            inputColor = "black";
            inputFontWeight = "formal";

            // Làm sạch các trường input sau khi cập nhật thành công
            buttonText = "Tìm kiếm";
            ThangTinhCongMuon = string.Empty;
            SoGioTinhMuon = null;
            SoTienPhatMuon = null;
            SoTienPhatNghiLam = null;

            IsDisabledSearch = false;
            IsDisabledNew = false;
            IsDisabledUpdate = true;
            await SearchPhat();
        }
        else
        {
            // Hiển thị một thông báo lỗi hoặc thực hiện một hành động phù hợp nếu dữ liệu nhập không hợp lệ
            // Ví dụ:
            // Hiển thị một thông báo lỗi
        }
    }


    private bool isEditing = false;
    // Đổ dữ liệu vào input khi ấn icon sửa
    public void EditRowMuon(string thangTinhCong, int soGioTinhMuon, decimal soGTienPhatMuon, decimal soTienPhatNghiLam)
    {

        ThangTinhCongMuon = thangTinhCong;
        SoGioTinhMuon = soGioTinhMuon;
        SoTienPhatMuon = soGTienPhatMuon;
        SoTienPhatNghiLam = soTienPhatNghiLam;


        IsDisabledSearch = true;
        IsDisabledNew = true;
        IsDisabledUpdate = false;

        inputColor = "#ff8000";
        inputFontWeight = "bold";
        DisabledInputId = true;

        isEditing = true;

    }

    private async Task XoaThietLapPhat(string thangTinhCong)
    {
        try
        {
            // Tìm và xóa bản ghi từ cơ sở dữ liệu dựa trên ThangTinhCong
            await thietlapservices.DeletePhat(thangTinhCong);

        }
        catch (Exception ex)
        {
            // Xử lý lỗi nếu có
            throw new Exception("Lỗi khi xóa thietLap: " + ex.Message);
        }
    }

    public async Task ConfirmDeletePhat(string thangTinhCong)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc chắn muốn xóa không?" });
        if (confirmed)
        {
            await XoaThietLapPhat(thangTinhCong);
            // Sau khi xóa, cập nhật lại danh sách
            await SearchPhat();
        }
    }

    private async Task CheckReloadMuon()
    {
        if (string.IsNullOrEmpty(ThangTinhCongMuon))
        {
            await OnInitializedAsync();

        }
    }
    // PHÂN TRANG
    public int CurrentPageP = 1;
    public int PageSizeP = 6; // Số lượng bản ghi trên mỗi trang
    int totalRecordsP;
    public int totalPagesP = 0;

    private async Task LoadDataPhat()
    {
        // Tính toán số trang và lấy danh sách bản ghi cho trang hiện tại
        totalRecordsP = await thietlapservices.GetTotalRecordsPhatMuon();
        totalPagesP = (int)Math.Ceiling(totalRecordsP / (double)PageSizeP);

        if (CurrentPageP < 1)
            CurrentPageP = 1;
        else if (CurrentPageP > totalPagesP)
            CurrentPageP = totalPagesP;

        int skip = (CurrentPageP - 1) * PageSizeP;
        phatmuonList = await thietlapservices.GetPhatMuonPaged(skip, PageSizeP);
    }
    // Các phương thức xử lý sự kiện phân trang
    public async Task GoToPagePhat(int page)
    {
        CurrentPageP = page;
        await LoadDataPhat();
    }

    public bool IsCurrentPagePhat(int page)
    {
        return page == CurrentPageP;
    }

    public bool HasPreviousPagePhat()
    {
        return CurrentPageP > 1;
    }

    public bool HasNextPagePhat()
    {
        return CurrentPageP < (int)Math.Ceiling(totalRecordsP / (double)PageSizeP);
    }




    // PHÂN TRANG
    public int CurrentPage = 1;
    public int PageSize = 6; // Số lượng bản ghi trên mỗi trang
    int totalRecords;
    public int totalPages = 0;

    private async Task LoadData()
    {
        // Tính toán số trang và lấy danh sách bản ghi cho trang hiện tại
        totalRecords = await thietlapservices.GetTotalRecords();
        totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);

        if (CurrentPage < 1)
            CurrentPage = 1;
        else if (CurrentPage > totalPages)
            CurrentPage = totalPages;

        int skip = (CurrentPage - 1) * PageSize;
        thietlapList = await thietlapservices.GetThietLapPaged(skip, PageSize);
    }

    // Các phương thức xử lý sự kiện phân trang
    public async Task GoToPage(int page)
    {
        CurrentPage = page;
        await LoadData();
    }

    public bool IsCurrentPage(int page)
    {
        return page == CurrentPage;
    }

    public bool HasPreviousPage()
    {
        return CurrentPage > 1;
    }

    public bool HasNextPage()
    {
        return CurrentPage < (int)Math.Ceiling(totalRecords / (double)PageSize);
    }
}

